2. What does a just-in-time (JIT) compiler do? What is the difference between JIT and
general standard compiler and interpreter?

JIT is a part of JVM that is used to speed up the execution time of a program. 
JIT compilers compiles the code on the fly, right before their execution or even when they are already executing.
during runtime, it determines whether a code worth optimisations and if needed applies them. 
It does not replace usual compilers but are part of interpreters for performance boosts.

Using a compiler, Java source code(.java) is converted to Java byte code (.class files).
Once this is done, JVM loads the .class files at run time and converts them to a machine understandable code using an interpreter.

The ‘Just-In-Time’ compiler compiles the byte code on a method-by-method basis when they are called. 
The JVM analyze the method calls in byte code and compiles them to a platform specific executable code 
and efficient code.This code is then cached in memory for later use.

Once these method calls are compiled, the JVM then executes this optimized code instead of interpreting it which is likely 
to increase the performance of the execution.
If JVM use only interpreter the performance of JVM will be slow,so JVM uses JIT compiler and Interpreter both.

A compiler is a program that scans the entire program first and
converts the entire code into a equivalent machine code at once. 
Compiler generates errors if any at the end of execution of the program.

On the other side, interpreter takes the single instruction of the code, 
translates it into an intermediate code and then into a machine code, 
executes it and takes another instruction. 
Interpreter generates errors as soon as it finds error in any of the sequence of instructions.